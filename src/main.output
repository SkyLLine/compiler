Nonterminals useless in grammar

    idlist


Terminals unused in grammar

    T_INT_POINTER
    T_CHAR_POINTER
    ADD_ASSIGN
    SUB_ASSIGN
    MUL_ASSIGN
    DIV_ASSIGN
    MOD_ASSIGN
    BOOL
    SELF_INC
    SELF_DEC
    GET_ADDRESS


Rules useless in grammar

   87 idlist: variable
   88       | variable COMMA idlist


State 51 conflicts: 1 shift/reduce
State 80 conflicts: 1 shift/reduce
State 137 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: parts

    2 parts: part parts
    3      | part

    4 part: statement
    5     | function_declaration

    6 function_declaration: type IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    7                     | type IDENTIFIER LPAREN RPAREN LBRACE statements RBRACE

    8 parameters: parameter
    9           | parameter COMMA parameters

   10 parameter: type IDENTIFIER

   11 statements: statement
   12           | statement statements

   13 statement: declare_stmt SEMICOLON
   14          | assign_stmt SEMICOLON
   15          | for_stmt
   16          | while_stmt
   17          | if_else_stmt
   18          | printf_stmt SEMICOLON
   19          | scanf_stmt SEMICOLON
   20          | RETURN expr SEMICOLON
   21          | RETURN SEMICOLON
   22          | SEMICOLON

   23 field: LBRACE statements RBRACE

   24 for_stmt: FOR LPAREN simple_instruction SEMICOLON bool_expr SEMICOLON simple_instructions RPAREN field

   25 assign_stmt: simple_instructions

   26 if_else_stmt: IF LPAREN bool_expr RPAREN field ELSE field
   27             | IF LPAREN bool_expr RPAREN field

   28 printf_stmt: PRINTF LPAREN STRING COMMA exprs RPAREN
   29            | PRINTF LPAREN STRING RPAREN

   30 scanf_stmt: SCANF LPAREN STRING COMMA all_values RPAREN

   31 exprs: expr COMMA exprs
   32      | expr

   33 while_stmt: WHILE LPAREN bool_expr RPAREN field

   34 declare_stmt: type instructions

   35 simple_instructions: simple_instruction COMMA simple_instructions
   36                    | simple_instruction

   37 simple_instruction: all_value LOP_ASSIGN expr
   38                   | all_value LOP_ASSIGN bool_expr
   39                   | expr
   40                   | bool_expr

   41 instructions: instruction COMMA instructions
   42             | instruction

   43 instruction: IDENTIFIER LOP_ASSIGN expr
   44            | variable

   45 variable: IDENTIFIER
   46         | IDENTIFIER LBRACK INTEGER RBRACK
   47         | variable LBRACK INTEGER RBRACK

   48 bool_expr: LPAREN bool_expr RPAREN
   49          | expr EQ expr
   50          | expr NE expr
   51          | expr GE expr
   52          | expr LE expr
   53          | expr LT expr
   54          | expr GT expr
   55          | bool_expr LOG_AND bool_expr
   56          | bool_expr LOG_OR bool_expr
   57          | NOT bool_expr

   58 all_values: all_value COMMA all_values
   59           | all_value

   60 all_value: all_value LBRACK expr RBRACK
   61          | all_value POINT IDENTIFIER
   62          | IDENTIFIER
   63          | LPAREN all_value RPAREN

   64 expr: INTEGER
   65     | CHAR
   66     | all_value
   67     | IDENTIFIER LPAREN number_list RPAREN
   68     | IDENTIFIER LPAREN RPAREN
   69     | LPAREN expr RPAREN
   70     | expr MOD expr
   71     | expr MUL expr
   72     | expr DIV expr
   73     | expr ADD expr
   74     | expr SUB expr
   75     | SUB expr
   76     | ADD expr

   77 number_list: expr
   78            | bool_expr
   79            | bool_expr COMMA number_list
   80            | expr COMMA number_list

   81 type: T_INT
   82     | T_CHAR
   83     | T_VOID
   84     | T_STRING
   85     | T_BOOL
   86     | T_STRUCT IDENTIFIER


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    IF (258) 26 27
    ELSE (259) 26
    WHILE (260) 33
    FOR (261) 24
    RETURN (262) 20 21
    PRINTF (263) 28 29
    SCANF (264) 30
    T_INT (265) 81
    T_BOOL (266) 85
    T_CHAR (267) 82
    T_STRING (268) 84
    T_VOID (269) 83
    T_STRUCT (270) 86
    T_INT_POINTER (271)
    T_CHAR_POINTER (272)
    LOP_ASSIGN (273) 37 38 43
    ADD_ASSIGN (274)
    SUB_ASSIGN (275)
    MUL_ASSIGN (276)
    DIV_ASSIGN (277)
    MOD_ASSIGN (278)
    IDENTIFIER (279) 6 7 10 43 45 46 61 62 67 68 86
    INTEGER (280) 46 47 64
    CHAR (281) 65
    BOOL (282)
    STRING (283) 28 29 30
    SEMICOLON (284) 13 14 18 19 20 21 22 24
    COMMA (285) 9 28 30 31 35 41 58 79 80
    POINT (286) 61
    LPAREN (287) 6 7 24 26 27 28 29 30 33 48 63 67 68 69
    RPAREN (288) 6 7 24 26 27 28 29 30 33 48 63 67 68 69
    LBRACK (289) 46 47 60
    RBRACK (290) 46 47 60
    LBRACE (291) 6 7 23
    RBRACE (292) 6 7 23
    GT (293) 54
    LT (294) 53
    GE (295) 51
    LE (296) 52
    EQ (297) 49
    NE (298) 50
    ADD (299) 73 76
    SUB (300) 74 75
    MUL (301) 71
    DIV (302) 72
    MOD (303) 70
    LOG_OR (304) 56
    LOG_AND (305) 55
    NOT (306) 57
    NEG (307)
    POS (308)
    SELF_INC (309)
    SELF_DEC (310)
    GET_ADDRESS (311)


Nonterminals, with rules where they appear

    $accept (57)
        on left: 0
    program (58)
        on left: 1
        on right: 0
    parts (59)
        on left: 2 3
        on right: 1 2
    part (60)
        on left: 4 5
        on right: 2 3
    function_declaration (61)
        on left: 6 7
        on right: 5
    parameters (62)
        on left: 8 9
        on right: 6 9
    parameter (63)
        on left: 10
        on right: 8 9
    statements (64)
        on left: 11 12
        on right: 6 7 12 23
    statement (65)
        on left: 13 14 15 16 17 18 19 20 21 22
        on right: 4 11 12
    field (66)
        on left: 23
        on right: 24 26 27 33
    for_stmt (67)
        on left: 24
        on right: 15
    assign_stmt (68)
        on left: 25
        on right: 14
    if_else_stmt (69)
        on left: 26 27
        on right: 17
    printf_stmt (70)
        on left: 28 29
        on right: 18
    scanf_stmt (71)
        on left: 30
        on right: 19
    exprs (72)
        on left: 31 32
        on right: 28 31
    while_stmt (73)
        on left: 33
        on right: 16
    declare_stmt (74)
        on left: 34
        on right: 13
    simple_instructions (75)
        on left: 35 36
        on right: 24 25 35
    simple_instruction (76)
        on left: 37 38 39 40
        on right: 24 35 36
    instructions (77)
        on left: 41 42
        on right: 34 41
    instruction (78)
        on left: 43 44
        on right: 41 42
    variable (79)
        on left: 45 46 47
        on right: 44 47
    bool_expr (80)
        on left: 48 49 50 51 52 53 54 55 56 57
        on right: 24 26 27 33 38 40 48 55 56 57 78 79
    all_values (81)
        on left: 58 59
        on right: 30 58
    all_value (82)
        on left: 60 61 62 63
        on right: 37 38 58 59 60 61 63 66
    expr (83)
        on left: 64 65 66 67 68 69 70 71 72 73 74 75 76
        on right: 20 31 32 37 39 43 49 50 51 52 53 54 60 69 70 71 72 73 74 75 76 77 80
    number_list (84)
        on left: 77 78 79 80
        on right: 67 79 80
    type (85)
        on left: 81 82 83 84 85 86
        on right: 6 7 10 34


State 0

    0 $accept: . program $end

    IF          shift, and go to state 1
    WHILE       shift, and go to state 2
    FOR         shift, and go to state 3
    RETURN      shift, and go to state 4
    PRINTF      shift, and go to state 5
    SCANF       shift, and go to state 6
    T_INT       shift, and go to state 7
    T_BOOL      shift, and go to state 8
    T_CHAR      shift, and go to state 9
    T_STRING    shift, and go to state 10
    T_VOID      shift, and go to state 11
    T_STRUCT    shift, and go to state 12
    IDENTIFIER  shift, and go to state 13
    INTEGER     shift, and go to state 14
    CHAR        shift, and go to state 15
    SEMICOLON   shift, and go to state 16
    LPAREN      shift, and go to state 17
    ADD         shift, and go to state 18
    SUB         shift, and go to state 19
    NOT         shift, and go to state 20

    program               go to state 21
    parts                 go to state 22
    part                  go to state 23
    function_declaration  go to state 24
    statement             go to state 25
    for_stmt              go to state 26
    assign_stmt           go to state 27
    if_else_stmt          go to state 28
    printf_stmt           go to state 29
    scanf_stmt            go to state 30
    while_stmt            go to state 31
    declare_stmt          go to state 32
    simple_instructions   go to state 33
    simple_instruction    go to state 34
    bool_expr             go to state 35
    all_value             go to state 36
    expr                  go to state 37
    type                  go to state 38


State 1

   26 if_else_stmt: IF . LPAREN bool_expr RPAREN field ELSE field
   27             | IF . LPAREN bool_expr RPAREN field

    LPAREN  shift, and go to state 39


State 2

   33 while_stmt: WHILE . LPAREN bool_expr RPAREN field

    LPAREN  shift, and go to state 40


State 3

   24 for_stmt: FOR . LPAREN simple_instruction SEMICOLON bool_expr SEMICOLON simple_instructions RPAREN field

    LPAREN  shift, and go to state 41


State 4

   20 statement: RETURN . expr SEMICOLON
   21          | RETURN . SEMICOLON

    IDENTIFIER  shift, and go to state 13
    INTEGER     shift, and go to state 14
    CHAR        shift, and go to state 15
    SEMICOLON   shift, and go to state 42
    LPAREN      shift, and go to state 43
    ADD         shift, and go to state 18
    SUB         shift, and go to state 19

    all_value  go to state 44
    expr       go to state 45


State 5

   28 printf_stmt: PRINTF . LPAREN STRING COMMA exprs RPAREN
   29            | PRINTF . LPAREN STRING RPAREN

    LPAREN  shift, and go to state 46


State 6

   30 scanf_stmt: SCANF . LPAREN STRING COMMA all_values RPAREN

    LPAREN  shift, and go to state 47


State 7

   81 type: T_INT .

    $default  reduce using rule 81 (type)


State 8

   85 type: T_BOOL .

    $default  reduce using rule 85 (type)


State 9

   82 type: T_CHAR .

    $default  reduce using rule 82 (type)


State 10

   84 type: T_STRING .

    $default  reduce using rule 84 (type)


State 11

   83 type: T_VOID .

    $default  reduce using rule 83 (type)


State 12

   86 type: T_STRUCT . IDENTIFIER

    IDENTIFIER  shift, and go to state 48


State 13

   62 all_value: IDENTIFIER .
   67 expr: IDENTIFIER . LPAREN number_list RPAREN
   68     | IDENTIFIER . LPAREN RPAREN

    LPAREN  shift, and go to state 49

    $default  reduce using rule 62 (all_value)


State 14

   64 expr: INTEGER .

    $default  reduce using rule 64 (expr)


State 15

   65 expr: CHAR .

    $default  reduce using rule 65 (expr)


State 16

   22 statement: SEMICOLON .

    $default  reduce using rule 22 (statement)


State 17

   48 bool_expr: LPAREN . bool_expr RPAREN
   63 all_value: LPAREN . all_value RPAREN
   69 expr: LPAREN . expr RPAREN

    IDENTIFIER  shift, and go to state 13
    INTEGER     shift, and go to state 14
    CHAR        shift, and go to state 15
    LPAREN      shift, and go to state 17
    ADD         shift, and go to state 18
    SUB         shift, and go to state 19
    NOT         shift, and go to state 20

    bool_expr  go to state 50
    all_value  go to state 51
    expr       go to state 52


State 18

   76 expr: ADD . expr

    IDENTIFIER  shift, and go to state 13
    INTEGER     shift, and go to state 14
    CHAR        shift, and go to state 15
    LPAREN      shift, and go to state 43
    ADD         shift, and go to state 18
    SUB         shift, and go to state 19

    all_value  go to state 44
    expr       go to state 53


State 19

   75 expr: SUB . expr

    IDENTIFIER  shift, and go to state 13
    INTEGER     shift, and go to state 14
    CHAR        shift, and go to state 15
    LPAREN      shift, and go to state 43
    ADD         shift, and go to state 18
    SUB         shift, and go to state 19

    all_value  go to state 44
    expr       go to state 54


State 20

   57 bool_expr: NOT . bool_expr

    IDENTIFIER  shift, and go to state 13
    INTEGER     shift, and go to state 14
    CHAR        shift, and go to state 15
    LPAREN      shift, and go to state 17
    ADD         shift, and go to state 18
    SUB         shift, and go to state 19
    NOT         shift, and go to state 20

    bool_expr  go to state 55
    all_value  go to state 44
    expr       go to state 56


State 21

    0 $accept: program . $end

    $end  shift, and go to state 57


State 22

    1 program: parts .

    $default  reduce using rule 1 (program)


State 23

    2 parts: part . parts
    3      | part .

    IF          shift, and go to state 1
    WHILE       shift, and go to state 2
    FOR         shift, and go to state 3
    RETURN      shift, and go to state 4
    PRINTF      shift, and go to state 5
    SCANF       shift, and go to state 6
    T_INT       shift, and go to state 7
    T_BOOL      shift, and go to state 8
    T_CHAR      shift, and go to state 9
    T_STRING    shift, and go to state 10
    T_VOID      shift, and go to state 11
    T_STRUCT    shift, and go to state 12
    IDENTIFIER  shift, and go to state 13
    INTEGER     shift, and go to state 14
    CHAR        shift, and go to state 15
    SEMICOLON   shift, and go to state 16
    LPAREN      shift, and go to state 17
    ADD         shift, and go to state 18
    SUB         shift, and go to state 19
    NOT         shift, and go to state 20

    $default  reduce using rule 3 (parts)

    parts                 go to state 58
    part                  go to state 23
    function_declaration  go to state 24
    statement             go to state 25
    for_stmt              go to state 26
    assign_stmt           go to state 27
    if_else_stmt          go to state 28
    printf_stmt           go to state 29
    scanf_stmt            go to state 30
    while_stmt            go to state 31
    declare_stmt          go to state 32
    simple_instructions   go to state 33
    simple_instruction    go to state 34
    bool_expr             go to state 35
    all_value             go to state 36
    expr                  go to state 37
    type                  go to state 38


State 24

    5 part: function_declaration .

    $default  reduce using rule 5 (part)


State 25

    4 part: statement .

    $default  reduce using rule 4 (part)


State 26

   15 statement: for_stmt .

    $default  reduce using rule 15 (statement)


State 27

   14 statement: assign_stmt . SEMICOLON

    SEMICOLON  shift, and go to state 59


State 28

   17 statement: if_else_stmt .

    $default  reduce using rule 17 (statement)


State 29

   18 statement: printf_stmt . SEMICOLON

    SEMICOLON  shift, and go to state 60


State 30

   19 statement: scanf_stmt . SEMICOLON

    SEMICOLON  shift, and go to state 61


State 31

   16 statement: while_stmt .

    $default  reduce using rule 16 (statement)


State 32

   13 statement: declare_stmt . SEMICOLON

    SEMICOLON  shift, and go to state 62


State 33

   25 assign_stmt: simple_instructions .

    $default  reduce using rule 25 (assign_stmt)


State 34

   35 simple_instructions: simple_instruction . COMMA simple_instructions
   36                    | simple_instruction .

    COMMA  shift, and go to state 63

    $default  reduce using rule 36 (simple_instructions)


State 35

   40 simple_instruction: bool_expr .
   55 bool_expr: bool_expr . LOG_AND bool_expr
   56          | bool_expr . LOG_OR bool_expr

    LOG_OR   shift, and go to state 64
    LOG_AND  shift, and go to state 65

    $default  reduce using rule 40 (simple_instruction)


State 36

   37 simple_instruction: all_value . LOP_ASSIGN expr
   38                   | all_value . LOP_ASSIGN bool_expr
   60 all_value: all_value . LBRACK expr RBRACK
   61          | all_value . POINT IDENTIFIER
   66 expr: all_value .

    LOP_ASSIGN  shift, and go to state 66
    POINT       shift, and go to state 67
    LBRACK      shift, and go to state 68

    $default  reduce using rule 66 (expr)


State 37

   39 simple_instruction: expr .
   49 bool_expr: expr . EQ expr
   50          | expr . NE expr
   51          | expr . GE expr
   52          | expr . LE expr
   53          | expr . LT expr
   54          | expr . GT expr
   70 expr: expr . MOD expr
   71     | expr . MUL expr
   72     | expr . DIV expr
   73     | expr . ADD expr
   74     | expr . SUB expr

    GT   shift, and go to state 69
    LT   shift, and go to state 70
    GE   shift, and go to state 71
    LE   shift, and go to state 72
    EQ   shift, and go to state 73
    NE   shift, and go to state 74
    ADD  shift, and go to state 75
    SUB  shift, and go to state 76
    MUL  shift, and go to state 77
    DIV  shift, and go to state 78
    MOD  shift, and go to state 79

    $default  reduce using rule 39 (simple_instruction)


State 38

    6 function_declaration: type . IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE
    7                     | type . IDENTIFIER LPAREN RPAREN LBRACE statements RBRACE
   34 declare_stmt: type . instructions

    IDENTIFIER  shift, and go to state 80

    instructions  go to state 81
    instruction   go to state 82
    variable      go to state 83


State 39

   26 if_else_stmt: IF LPAREN . bool_expr RPAREN field ELSE field
   27             | IF LPAREN . bool_expr RPAREN field

    IDENTIFIER  shift, and go to state 13
    INTEGER     shift, and go to state 14
    CHAR        shift, and go to state 15
    LPAREN      shift, and go to state 17
    ADD         shift, and go to state 18
    SUB         shift, and go to state 19
    NOT         shift, and go to state 20

    bool_expr  go to state 84
    all_value  go to state 44
    expr       go to state 56


State 40

   33 while_stmt: WHILE LPAREN . bool_expr RPAREN field

    IDENTIFIER  shift, and go to state 13
    INTEGER     shift, and go to state 14
    CHAR        shift, and go to state 15
    LPAREN      shift, and go to state 17
    ADD         shift, and go to state 18
    SUB         shift, and go to state 19
    NOT         shift, and go to state 20

    bool_expr  go to state 85
    all_value  go to state 44
    expr       go to state 56


State 41

   24 for_stmt: FOR LPAREN . simple_instruction SEMICOLON bool_expr SEMICOLON simple_instructions RPAREN field

    IDENTIFIER  shift, and go to state 13
    INTEGER     shift, and go to state 14
    CHAR        shift, and go to state 15
    LPAREN      shift, and go to state 17
    ADD         shift, and go to state 18
    SUB         shift, and go to state 19
    NOT         shift, and go to state 20

    simple_instruction  go to state 86
    bool_expr           go to state 35
    all_value           go to state 36
    expr                go to state 37


State 42

   21 statement: RETURN SEMICOLON .

    $default  reduce using rule 21 (statement)


State 43

   63 all_value: LPAREN . all_value RPAREN
   69 expr: LPAREN . expr RPAREN

    IDENTIFIER  shift, and go to state 13
    INTEGER     shift, and go to state 14
    CHAR        shift, and go to state 15
    LPAREN      shift, and go to state 43
    ADD         shift, and go to state 18
    SUB         shift, and go to state 19

    all_value  go to state 51
    expr       go to state 87


State 44

   60 all_value: all_value . LBRACK expr RBRACK
   61          | all_value . POINT IDENTIFIER
   66 expr: all_value .

    POINT   shift, and go to state 67
    LBRACK  shift, and go to state 68

    $default  reduce using rule 66 (expr)


State 45

   20 statement: RETURN expr . SEMICOLON
   70 expr: expr . MOD expr
   71     | expr . MUL expr
   72     | expr . DIV expr
   73     | expr . ADD expr
   74     | expr . SUB expr

    SEMICOLON  shift, and go to state 88
    ADD        shift, and go to state 75
    SUB        shift, and go to state 76
    MUL        shift, and go to state 77
    DIV        shift, and go to state 78
    MOD        shift, and go to state 79


State 46

   28 printf_stmt: PRINTF LPAREN . STRING COMMA exprs RPAREN
   29            | PRINTF LPAREN . STRING RPAREN

    STRING  shift, and go to state 89


State 47

   30 scanf_stmt: SCANF LPAREN . STRING COMMA all_values RPAREN

    STRING  shift, and go to state 90


State 48

   86 type: T_STRUCT IDENTIFIER .

    $default  reduce using rule 86 (type)


State 49

   67 expr: IDENTIFIER LPAREN . number_list RPAREN
   68     | IDENTIFIER LPAREN . RPAREN

    IDENTIFIER  shift, and go to state 13
    INTEGER     shift, and go to state 14
    CHAR        shift, and go to state 15
    LPAREN      shift, and go to state 17
    RPAREN      shift, and go to state 91
    ADD         shift, and go to state 18
    SUB         shift, and go to state 19
    NOT         shift, and go to state 20

    bool_expr    go to state 92
    all_value    go to state 44
    expr         go to state 93
    number_list  go to state 94


State 50

   48 bool_expr: LPAREN bool_expr . RPAREN
   55          | bool_expr . LOG_AND bool_expr
   56          | bool_expr . LOG_OR bool_expr

    RPAREN   shift, and go to state 95
    LOG_OR   shift, and go to state 64
    LOG_AND  shift, and go to state 65


State 51

   60 all_value: all_value . LBRACK expr RBRACK
   61          | all_value . POINT IDENTIFIER
   63          | LPAREN all_value . RPAREN
   66 expr: all_value .

    POINT   shift, and go to state 67
    RPAREN  shift, and go to state 96
    LBRACK  shift, and go to state 68

    RPAREN    [reduce using rule 66 (expr)]
    $default  reduce using rule 66 (expr)


State 52

   49 bool_expr: expr . EQ expr
   50          | expr . NE expr
   51          | expr . GE expr
   52          | expr . LE expr
   53          | expr . LT expr
   54          | expr . GT expr
   69 expr: LPAREN expr . RPAREN
   70     | expr . MOD expr
   71     | expr . MUL expr
   72     | expr . DIV expr
   73     | expr . ADD expr
   74     | expr . SUB expr

    RPAREN  shift, and go to state 97
    GT      shift, and go to state 69
    LT      shift, and go to state 70
    GE      shift, and go to state 71
    LE      shift, and go to state 72
    EQ      shift, and go to state 73
    NE      shift, and go to state 74
    ADD     shift, and go to state 75
    SUB     shift, and go to state 76
    MUL     shift, and go to state 77
    DIV     shift, and go to state 78
    MOD     shift, and go to state 79


State 53

   70 expr: expr . MOD expr
   71     | expr . MUL expr
   72     | expr . DIV expr
   73     | expr . ADD expr
   74     | expr . SUB expr
   76     | ADD expr .

    $default  reduce using rule 76 (expr)


State 54

   70 expr: expr . MOD expr
   71     | expr . MUL expr
   72     | expr . DIV expr
   73     | expr . ADD expr
   74     | expr . SUB expr
   75     | SUB expr .

    $default  reduce using rule 75 (expr)


State 55

   55 bool_expr: bool_expr . LOG_AND bool_expr
   56          | bool_expr . LOG_OR bool_expr
   57          | NOT bool_expr .

    $default  reduce using rule 57 (bool_expr)


State 56

   49 bool_expr: expr . EQ expr
   50          | expr . NE expr
   51          | expr . GE expr
   52          | expr . LE expr
   53          | expr . LT expr
   54          | expr . GT expr
   70 expr: expr . MOD expr
   71     | expr . MUL expr
   72     | expr . DIV expr
   73     | expr . ADD expr
   74     | expr . SUB expr

    GT   shift, and go to state 69
    LT   shift, and go to state 70
    GE   shift, and go to state 71
    LE   shift, and go to state 72
    EQ   shift, and go to state 73
    NE   shift, and go to state 74
    ADD  shift, and go to state 75
    SUB  shift, and go to state 76
    MUL  shift, and go to state 77
    DIV  shift, and go to state 78
    MOD  shift, and go to state 79


State 57

    0 $accept: program $end .

    $default  accept


State 58

    2 parts: part parts .

    $default  reduce using rule 2 (parts)


State 59

   14 statement: assign_stmt SEMICOLON .

    $default  reduce using rule 14 (statement)


State 60

   18 statement: printf_stmt SEMICOLON .

    $default  reduce using rule 18 (statement)


State 61

   19 statement: scanf_stmt SEMICOLON .

    $default  reduce using rule 19 (statement)


State 62

   13 statement: declare_stmt SEMICOLON .

    $default  reduce using rule 13 (statement)


State 63

   35 simple_instructions: simple_instruction COMMA . simple_instructions

    IDENTIFIER  shift, and go to state 13
    INTEGER     shift, and go to state 14
    CHAR        shift, and go to state 15
    LPAREN      shift, and go to state 17
    ADD         shift, and go to state 18
    SUB         shift, and go to state 19
    NOT         shift, and go to state 20

    simple_instructions  go to state 98
    simple_instruction   go to state 34
    bool_expr            go to state 35
    all_value            go to state 36
    expr                 go to state 37


State 64

   56 bool_expr: bool_expr LOG_OR . bool_expr

    IDENTIFIER  shift, and go to state 13
    INTEGER     shift, and go to state 14
    CHAR        shift, and go to state 15
    LPAREN      shift, and go to state 17
    ADD         shift, and go to state 18
    SUB         shift, and go to state 19
    NOT         shift, and go to state 20

    bool_expr  go to state 99
    all_value  go to state 44
    expr       go to state 56


State 65

   55 bool_expr: bool_expr LOG_AND . bool_expr

    IDENTIFIER  shift, and go to state 13
    INTEGER     shift, and go to state 14
    CHAR        shift, and go to state 15
    LPAREN      shift, and go to state 17
    ADD         shift, and go to state 18
    SUB         shift, and go to state 19
    NOT         shift, and go to state 20

    bool_expr  go to state 100
    all_value  go to state 44
    expr       go to state 56


State 66

   37 simple_instruction: all_value LOP_ASSIGN . expr
   38                   | all_value LOP_ASSIGN . bool_expr

    IDENTIFIER  shift, and go to state 13
    INTEGER     shift, and go to state 14
    CHAR        shift, and go to state 15
    LPAREN      shift, and go to state 17
    ADD         shift, and go to state 18
    SUB         shift, and go to state 19
    NOT         shift, and go to state 20

    bool_expr  go to state 101
    all_value  go to state 44
    expr       go to state 102


State 67

   61 all_value: all_value POINT . IDENTIFIER

    IDENTIFIER  shift, and go to state 103


State 68

   60 all_value: all_value LBRACK . expr RBRACK

    IDENTIFIER  shift, and go to state 13
    INTEGER     shift, and go to state 14
    CHAR        shift, and go to state 15
    LPAREN      shift, and go to state 43
    ADD         shift, and go to state 18
    SUB         shift, and go to state 19

    all_value  go to state 44
    expr       go to state 104


State 69

   54 bool_expr: expr GT . expr

    IDENTIFIER  shift, and go to state 13
    INTEGER     shift, and go to state 14
    CHAR        shift, and go to state 15
    LPAREN      shift, and go to state 43
    ADD         shift, and go to state 18
    SUB         shift, and go to state 19

    all_value  go to state 44
    expr       go to state 105


State 70

   53 bool_expr: expr LT . expr

    IDENTIFIER  shift, and go to state 13
    INTEGER     shift, and go to state 14
    CHAR        shift, and go to state 15
    LPAREN      shift, and go to state 43
    ADD         shift, and go to state 18
    SUB         shift, and go to state 19

    all_value  go to state 44
    expr       go to state 106


State 71

   51 bool_expr: expr GE . expr

    IDENTIFIER  shift, and go to state 13
    INTEGER     shift, and go to state 14
    CHAR        shift, and go to state 15
    LPAREN      shift, and go to state 43
    ADD         shift, and go to state 18
    SUB         shift, and go to state 19

    all_value  go to state 44
    expr       go to state 107


State 72

   52 bool_expr: expr LE . expr

    IDENTIFIER  shift, and go to state 13
    INTEGER     shift, and go to state 14
    CHAR        shift, and go to state 15
    LPAREN      shift, and go to state 43
    ADD         shift, and go to state 18
    SUB         shift, and go to state 19

    all_value  go to state 44
    expr       go to state 108


State 73

   49 bool_expr: expr EQ . expr

    IDENTIFIER  shift, and go to state 13
    INTEGER     shift, and go to state 14
    CHAR        shift, and go to state 15
    LPAREN      shift, and go to state 43
    ADD         shift, and go to state 18
    SUB         shift, and go to state 19

    all_value  go to state 44
    expr       go to state 109


State 74

   50 bool_expr: expr NE . expr

    IDENTIFIER  shift, and go to state 13
    INTEGER     shift, and go to state 14
    CHAR        shift, and go to state 15
    LPAREN      shift, and go to state 43
    ADD         shift, and go to state 18
    SUB         shift, and go to state 19

    all_value  go to state 44
    expr       go to state 110


State 75

   73 expr: expr ADD . expr

    IDENTIFIER  shift, and go to state 13
    INTEGER     shift, and go to state 14
    CHAR        shift, and go to state 15
    LPAREN      shift, and go to state 43
    ADD         shift, and go to state 18
    SUB         shift, and go to state 19

    all_value  go to state 44
    expr       go to state 111


State 76

   74 expr: expr SUB . expr

    IDENTIFIER  shift, and go to state 13
    INTEGER     shift, and go to state 14
    CHAR        shift, and go to state 15
    LPAREN      shift, and go to state 43
    ADD         shift, and go to state 18
    SUB         shift, and go to state 19

    all_value  go to state 44
    expr       go to state 112


State 77

   71 expr: expr MUL . expr

    IDENTIFIER  shift, and go to state 13
    INTEGER     shift, and go to state 14
    CHAR        shift, and go to state 15
    LPAREN      shift, and go to state 43
    ADD         shift, and go to state 18
    SUB         shift, and go to state 19

    all_value  go to state 44
    expr       go to state 113


State 78

   72 expr: expr DIV . expr

    IDENTIFIER  shift, and go to state 13
    INTEGER     shift, and go to state 14
    CHAR        shift, and go to state 15
    LPAREN      shift, and go to state 43
    ADD         shift, and go to state 18
    SUB         shift, and go to state 19

    all_value  go to state 44
    expr       go to state 114


State 79

   70 expr: expr MOD . expr

    IDENTIFIER  shift, and go to state 13
    INTEGER     shift, and go to state 14
    CHAR        shift, and go to state 15
    LPAREN      shift, and go to state 43
    ADD         shift, and go to state 18
    SUB         shift, and go to state 19

    all_value  go to state 44
    expr       go to state 115


State 80

    6 function_declaration: type IDENTIFIER . LPAREN parameters RPAREN LBRACE statements RBRACE
    7                     | type IDENTIFIER . LPAREN RPAREN LBRACE statements RBRACE
   43 instruction: IDENTIFIER . LOP_ASSIGN expr
   45 variable: IDENTIFIER .
   46         | IDENTIFIER . LBRACK INTEGER RBRACK

    LOP_ASSIGN  shift, and go to state 116
    LPAREN      shift, and go to state 117
    LBRACK      shift, and go to state 118

    LBRACK    [reduce using rule 45 (variable)]
    $default  reduce using rule 45 (variable)


State 81

   34 declare_stmt: type instructions .

    $default  reduce using rule 34 (declare_stmt)


State 82

   41 instructions: instruction . COMMA instructions
   42             | instruction .

    COMMA  shift, and go to state 119

    $default  reduce using rule 42 (instructions)


State 83

   44 instruction: variable .
   47 variable: variable . LBRACK INTEGER RBRACK

    LBRACK  shift, and go to state 120

    $default  reduce using rule 44 (instruction)


State 84

   26 if_else_stmt: IF LPAREN bool_expr . RPAREN field ELSE field
   27             | IF LPAREN bool_expr . RPAREN field
   55 bool_expr: bool_expr . LOG_AND bool_expr
   56          | bool_expr . LOG_OR bool_expr

    RPAREN   shift, and go to state 121
    LOG_OR   shift, and go to state 64
    LOG_AND  shift, and go to state 65


State 85

   33 while_stmt: WHILE LPAREN bool_expr . RPAREN field
   55 bool_expr: bool_expr . LOG_AND bool_expr
   56          | bool_expr . LOG_OR bool_expr

    RPAREN   shift, and go to state 122
    LOG_OR   shift, and go to state 64
    LOG_AND  shift, and go to state 65


State 86

   24 for_stmt: FOR LPAREN simple_instruction . SEMICOLON bool_expr SEMICOLON simple_instructions RPAREN field

    SEMICOLON  shift, and go to state 123


State 87

   69 expr: LPAREN expr . RPAREN
   70     | expr . MOD expr
   71     | expr . MUL expr
   72     | expr . DIV expr
   73     | expr . ADD expr
   74     | expr . SUB expr

    RPAREN  shift, and go to state 97
    ADD     shift, and go to state 75
    SUB     shift, and go to state 76
    MUL     shift, and go to state 77
    DIV     shift, and go to state 78
    MOD     shift, and go to state 79


State 88

   20 statement: RETURN expr SEMICOLON .

    $default  reduce using rule 20 (statement)


State 89

   28 printf_stmt: PRINTF LPAREN STRING . COMMA exprs RPAREN
   29            | PRINTF LPAREN STRING . RPAREN

    COMMA   shift, and go to state 124
    RPAREN  shift, and go to state 125


State 90

   30 scanf_stmt: SCANF LPAREN STRING . COMMA all_values RPAREN

    COMMA  shift, and go to state 126


State 91

   68 expr: IDENTIFIER LPAREN RPAREN .

    $default  reduce using rule 68 (expr)


State 92

   55 bool_expr: bool_expr . LOG_AND bool_expr
   56          | bool_expr . LOG_OR bool_expr
   78 number_list: bool_expr .
   79            | bool_expr . COMMA number_list

    COMMA    shift, and go to state 127
    LOG_OR   shift, and go to state 64
    LOG_AND  shift, and go to state 65

    $default  reduce using rule 78 (number_list)


State 93

   49 bool_expr: expr . EQ expr
   50          | expr . NE expr
   51          | expr . GE expr
   52          | expr . LE expr
   53          | expr . LT expr
   54          | expr . GT expr
   70 expr: expr . MOD expr
   71     | expr . MUL expr
   72     | expr . DIV expr
   73     | expr . ADD expr
   74     | expr . SUB expr
   77 number_list: expr .
   80            | expr . COMMA number_list

    COMMA  shift, and go to state 128
    GT     shift, and go to state 69
    LT     shift, and go to state 70
    GE     shift, and go to state 71
    LE     shift, and go to state 72
    EQ     shift, and go to state 73
    NE     shift, and go to state 74
    ADD    shift, and go to state 75
    SUB    shift, and go to state 76
    MUL    shift, and go to state 77
    DIV    shift, and go to state 78
    MOD    shift, and go to state 79

    $default  reduce using rule 77 (number_list)


State 94

   67 expr: IDENTIFIER LPAREN number_list . RPAREN

    RPAREN  shift, and go to state 129


State 95

   48 bool_expr: LPAREN bool_expr RPAREN .

    $default  reduce using rule 48 (bool_expr)


State 96

   63 all_value: LPAREN all_value RPAREN .

    $default  reduce using rule 63 (all_value)


State 97

   69 expr: LPAREN expr RPAREN .

    $default  reduce using rule 69 (expr)


State 98

   35 simple_instructions: simple_instruction COMMA simple_instructions .

    $default  reduce using rule 35 (simple_instructions)


State 99

   55 bool_expr: bool_expr . LOG_AND bool_expr
   56          | bool_expr . LOG_OR bool_expr
   56          | bool_expr LOG_OR bool_expr .

    LOG_AND  shift, and go to state 65

    $default  reduce using rule 56 (bool_expr)


State 100

   55 bool_expr: bool_expr . LOG_AND bool_expr
   55          | bool_expr LOG_AND bool_expr .
   56          | bool_expr . LOG_OR bool_expr

    $default  reduce using rule 55 (bool_expr)


State 101

   38 simple_instruction: all_value LOP_ASSIGN bool_expr .
   55 bool_expr: bool_expr . LOG_AND bool_expr
   56          | bool_expr . LOG_OR bool_expr

    LOG_OR   shift, and go to state 64
    LOG_AND  shift, and go to state 65

    $default  reduce using rule 38 (simple_instruction)


State 102

   37 simple_instruction: all_value LOP_ASSIGN expr .
   49 bool_expr: expr . EQ expr
   50          | expr . NE expr
   51          | expr . GE expr
   52          | expr . LE expr
   53          | expr . LT expr
   54          | expr . GT expr
   70 expr: expr . MOD expr
   71     | expr . MUL expr
   72     | expr . DIV expr
   73     | expr . ADD expr
   74     | expr . SUB expr

    GT   shift, and go to state 69
    LT   shift, and go to state 70
    GE   shift, and go to state 71
    LE   shift, and go to state 72
    EQ   shift, and go to state 73
    NE   shift, and go to state 74
    ADD  shift, and go to state 75
    SUB  shift, and go to state 76
    MUL  shift, and go to state 77
    DIV  shift, and go to state 78
    MOD  shift, and go to state 79

    $default  reduce using rule 37 (simple_instruction)


State 103

   61 all_value: all_value POINT IDENTIFIER .

    $default  reduce using rule 61 (all_value)


State 104

   60 all_value: all_value LBRACK expr . RBRACK
   70 expr: expr . MOD expr
   71     | expr . MUL expr
   72     | expr . DIV expr
   73     | expr . ADD expr
   74     | expr . SUB expr

    RBRACK  shift, and go to state 130
    ADD     shift, and go to state 75
    SUB     shift, and go to state 76
    MUL     shift, and go to state 77
    DIV     shift, and go to state 78
    MOD     shift, and go to state 79


State 105

   54 bool_expr: expr GT expr .
   70 expr: expr . MOD expr
   71     | expr . MUL expr
   72     | expr . DIV expr
   73     | expr . ADD expr
   74     | expr . SUB expr

    ADD  shift, and go to state 75
    SUB  shift, and go to state 76
    MUL  shift, and go to state 77
    DIV  shift, and go to state 78
    MOD  shift, and go to state 79

    $default  reduce using rule 54 (bool_expr)


State 106

   53 bool_expr: expr LT expr .
   70 expr: expr . MOD expr
   71     | expr . MUL expr
   72     | expr . DIV expr
   73     | expr . ADD expr
   74     | expr . SUB expr

    ADD  shift, and go to state 75
    SUB  shift, and go to state 76
    MUL  shift, and go to state 77
    DIV  shift, and go to state 78
    MOD  shift, and go to state 79

    $default  reduce using rule 53 (bool_expr)


State 107

   51 bool_expr: expr GE expr .
   70 expr: expr . MOD expr
   71     | expr . MUL expr
   72     | expr . DIV expr
   73     | expr . ADD expr
   74     | expr . SUB expr

    ADD  shift, and go to state 75
    SUB  shift, and go to state 76
    MUL  shift, and go to state 77
    DIV  shift, and go to state 78
    MOD  shift, and go to state 79

    $default  reduce using rule 51 (bool_expr)


State 108

   52 bool_expr: expr LE expr .
   70 expr: expr . MOD expr
   71     | expr . MUL expr
   72     | expr . DIV expr
   73     | expr . ADD expr
   74     | expr . SUB expr

    ADD  shift, and go to state 75
    SUB  shift, and go to state 76
    MUL  shift, and go to state 77
    DIV  shift, and go to state 78
    MOD  shift, and go to state 79

    $default  reduce using rule 52 (bool_expr)


State 109

   49 bool_expr: expr EQ expr .
   70 expr: expr . MOD expr
   71     | expr . MUL expr
   72     | expr . DIV expr
   73     | expr . ADD expr
   74     | expr . SUB expr

    ADD  shift, and go to state 75
    SUB  shift, and go to state 76
    MUL  shift, and go to state 77
    DIV  shift, and go to state 78
    MOD  shift, and go to state 79

    $default  reduce using rule 49 (bool_expr)


State 110

   50 bool_expr: expr NE expr .
   70 expr: expr . MOD expr
   71     | expr . MUL expr
   72     | expr . DIV expr
   73     | expr . ADD expr
   74     | expr . SUB expr

    ADD  shift, and go to state 75
    SUB  shift, and go to state 76
    MUL  shift, and go to state 77
    DIV  shift, and go to state 78
    MOD  shift, and go to state 79

    $default  reduce using rule 50 (bool_expr)


State 111

   70 expr: expr . MOD expr
   71     | expr . MUL expr
   72     | expr . DIV expr
   73     | expr . ADD expr
   73     | expr ADD expr .
   74     | expr . SUB expr

    MUL  shift, and go to state 77
    DIV  shift, and go to state 78
    MOD  shift, and go to state 79

    $default  reduce using rule 73 (expr)


State 112

   70 expr: expr . MOD expr
   71     | expr . MUL expr
   72     | expr . DIV expr
   73     | expr . ADD expr
   74     | expr . SUB expr
   74     | expr SUB expr .

    MUL  shift, and go to state 77
    DIV  shift, and go to state 78
    MOD  shift, and go to state 79

    $default  reduce using rule 74 (expr)


State 113

   70 expr: expr . MOD expr
   71     | expr . MUL expr
   71     | expr MUL expr .
   72     | expr . DIV expr
   73     | expr . ADD expr
   74     | expr . SUB expr

    $default  reduce using rule 71 (expr)


State 114

   70 expr: expr . MOD expr
   71     | expr . MUL expr
   72     | expr . DIV expr
   72     | expr DIV expr .
   73     | expr . ADD expr
   74     | expr . SUB expr

    $default  reduce using rule 72 (expr)


State 115

   70 expr: expr . MOD expr
   70     | expr MOD expr .
   71     | expr . MUL expr
   72     | expr . DIV expr
   73     | expr . ADD expr
   74     | expr . SUB expr

    $default  reduce using rule 70 (expr)


State 116

   43 instruction: IDENTIFIER LOP_ASSIGN . expr

    IDENTIFIER  shift, and go to state 13
    INTEGER     shift, and go to state 14
    CHAR        shift, and go to state 15
    LPAREN      shift, and go to state 43
    ADD         shift, and go to state 18
    SUB         shift, and go to state 19

    all_value  go to state 44
    expr       go to state 131


State 117

    6 function_declaration: type IDENTIFIER LPAREN . parameters RPAREN LBRACE statements RBRACE
    7                     | type IDENTIFIER LPAREN . RPAREN LBRACE statements RBRACE

    T_INT     shift, and go to state 7
    T_BOOL    shift, and go to state 8
    T_CHAR    shift, and go to state 9
    T_STRING  shift, and go to state 10
    T_VOID    shift, and go to state 11
    T_STRUCT  shift, and go to state 12
    RPAREN    shift, and go to state 132

    parameters  go to state 133
    parameter   go to state 134
    type        go to state 135


State 118

   46 variable: IDENTIFIER LBRACK . INTEGER RBRACK

    INTEGER  shift, and go to state 136


State 119

   41 instructions: instruction COMMA . instructions

    IDENTIFIER  shift, and go to state 137

    instructions  go to state 138
    instruction   go to state 82
    variable      go to state 83


State 120

   47 variable: variable LBRACK . INTEGER RBRACK

    INTEGER  shift, and go to state 139


State 121

   26 if_else_stmt: IF LPAREN bool_expr RPAREN . field ELSE field
   27             | IF LPAREN bool_expr RPAREN . field

    LBRACE  shift, and go to state 140

    field  go to state 141


State 122

   33 while_stmt: WHILE LPAREN bool_expr RPAREN . field

    LBRACE  shift, and go to state 140

    field  go to state 142


State 123

   24 for_stmt: FOR LPAREN simple_instruction SEMICOLON . bool_expr SEMICOLON simple_instructions RPAREN field

    IDENTIFIER  shift, and go to state 13
    INTEGER     shift, and go to state 14
    CHAR        shift, and go to state 15
    LPAREN      shift, and go to state 17
    ADD         shift, and go to state 18
    SUB         shift, and go to state 19
    NOT         shift, and go to state 20

    bool_expr  go to state 143
    all_value  go to state 44
    expr       go to state 56


State 124

   28 printf_stmt: PRINTF LPAREN STRING COMMA . exprs RPAREN

    IDENTIFIER  shift, and go to state 13
    INTEGER     shift, and go to state 14
    CHAR        shift, and go to state 15
    LPAREN      shift, and go to state 43
    ADD         shift, and go to state 18
    SUB         shift, and go to state 19

    exprs      go to state 144
    all_value  go to state 44
    expr       go to state 145


State 125

   29 printf_stmt: PRINTF LPAREN STRING RPAREN .

    $default  reduce using rule 29 (printf_stmt)


State 126

   30 scanf_stmt: SCANF LPAREN STRING COMMA . all_values RPAREN

    IDENTIFIER  shift, and go to state 146
    LPAREN      shift, and go to state 147

    all_values  go to state 148
    all_value   go to state 149


State 127

   79 number_list: bool_expr COMMA . number_list

    IDENTIFIER  shift, and go to state 13
    INTEGER     shift, and go to state 14
    CHAR        shift, and go to state 15
    LPAREN      shift, and go to state 17
    ADD         shift, and go to state 18
    SUB         shift, and go to state 19
    NOT         shift, and go to state 20

    bool_expr    go to state 92
    all_value    go to state 44
    expr         go to state 93
    number_list  go to state 150


State 128

   80 number_list: expr COMMA . number_list

    IDENTIFIER  shift, and go to state 13
    INTEGER     shift, and go to state 14
    CHAR        shift, and go to state 15
    LPAREN      shift, and go to state 17
    ADD         shift, and go to state 18
    SUB         shift, and go to state 19
    NOT         shift, and go to state 20

    bool_expr    go to state 92
    all_value    go to state 44
    expr         go to state 93
    number_list  go to state 151


State 129

   67 expr: IDENTIFIER LPAREN number_list RPAREN .

    $default  reduce using rule 67 (expr)


State 130

   60 all_value: all_value LBRACK expr RBRACK .

    $default  reduce using rule 60 (all_value)


State 131

   43 instruction: IDENTIFIER LOP_ASSIGN expr .
   70 expr: expr . MOD expr
   71     | expr . MUL expr
   72     | expr . DIV expr
   73     | expr . ADD expr
   74     | expr . SUB expr

    ADD  shift, and go to state 75
    SUB  shift, and go to state 76
    MUL  shift, and go to state 77
    DIV  shift, and go to state 78
    MOD  shift, and go to state 79

    $default  reduce using rule 43 (instruction)


State 132

    7 function_declaration: type IDENTIFIER LPAREN RPAREN . LBRACE statements RBRACE

    LBRACE  shift, and go to state 152


State 133

    6 function_declaration: type IDENTIFIER LPAREN parameters . RPAREN LBRACE statements RBRACE

    RPAREN  shift, and go to state 153


State 134

    8 parameters: parameter .
    9           | parameter . COMMA parameters

    COMMA  shift, and go to state 154

    $default  reduce using rule 8 (parameters)


State 135

   10 parameter: type . IDENTIFIER

    IDENTIFIER  shift, and go to state 155


State 136

   46 variable: IDENTIFIER LBRACK INTEGER . RBRACK

    RBRACK  shift, and go to state 156


State 137

   43 instruction: IDENTIFIER . LOP_ASSIGN expr
   45 variable: IDENTIFIER .
   46         | IDENTIFIER . LBRACK INTEGER RBRACK

    LOP_ASSIGN  shift, and go to state 116
    LBRACK      shift, and go to state 118

    LBRACK    [reduce using rule 45 (variable)]
    $default  reduce using rule 45 (variable)


State 138

   41 instructions: instruction COMMA instructions .

    $default  reduce using rule 41 (instructions)


State 139

   47 variable: variable LBRACK INTEGER . RBRACK

    RBRACK  shift, and go to state 157


State 140

   23 field: LBRACE . statements RBRACE

    IF          shift, and go to state 1
    WHILE       shift, and go to state 2
    FOR         shift, and go to state 3
    RETURN      shift, and go to state 4
    PRINTF      shift, and go to state 5
    SCANF       shift, and go to state 6
    T_INT       shift, and go to state 7
    T_BOOL      shift, and go to state 8
    T_CHAR      shift, and go to state 9
    T_STRING    shift, and go to state 10
    T_VOID      shift, and go to state 11
    T_STRUCT    shift, and go to state 12
    IDENTIFIER  shift, and go to state 13
    INTEGER     shift, and go to state 14
    CHAR        shift, and go to state 15
    SEMICOLON   shift, and go to state 16
    LPAREN      shift, and go to state 17
    ADD         shift, and go to state 18
    SUB         shift, and go to state 19
    NOT         shift, and go to state 20

    statements           go to state 158
    statement            go to state 159
    for_stmt             go to state 26
    assign_stmt          go to state 27
    if_else_stmt         go to state 28
    printf_stmt          go to state 29
    scanf_stmt           go to state 30
    while_stmt           go to state 31
    declare_stmt         go to state 32
    simple_instructions  go to state 33
    simple_instruction   go to state 34
    bool_expr            go to state 35
    all_value            go to state 36
    expr                 go to state 37
    type                 go to state 160


State 141

   26 if_else_stmt: IF LPAREN bool_expr RPAREN field . ELSE field
   27             | IF LPAREN bool_expr RPAREN field .

    ELSE  shift, and go to state 161

    $default  reduce using rule 27 (if_else_stmt)


State 142

   33 while_stmt: WHILE LPAREN bool_expr RPAREN field .

    $default  reduce using rule 33 (while_stmt)


State 143

   24 for_stmt: FOR LPAREN simple_instruction SEMICOLON bool_expr . SEMICOLON simple_instructions RPAREN field
   55 bool_expr: bool_expr . LOG_AND bool_expr
   56          | bool_expr . LOG_OR bool_expr

    SEMICOLON  shift, and go to state 162
    LOG_OR     shift, and go to state 64
    LOG_AND    shift, and go to state 65


State 144

   28 printf_stmt: PRINTF LPAREN STRING COMMA exprs . RPAREN

    RPAREN  shift, and go to state 163


State 145

   31 exprs: expr . COMMA exprs
   32      | expr .
   70 expr: expr . MOD expr
   71     | expr . MUL expr
   72     | expr . DIV expr
   73     | expr . ADD expr
   74     | expr . SUB expr

    COMMA  shift, and go to state 164
    ADD    shift, and go to state 75
    SUB    shift, and go to state 76
    MUL    shift, and go to state 77
    DIV    shift, and go to state 78
    MOD    shift, and go to state 79

    $default  reduce using rule 32 (exprs)


State 146

   62 all_value: IDENTIFIER .

    $default  reduce using rule 62 (all_value)


State 147

   63 all_value: LPAREN . all_value RPAREN

    IDENTIFIER  shift, and go to state 146
    LPAREN      shift, and go to state 147

    all_value  go to state 165


State 148

   30 scanf_stmt: SCANF LPAREN STRING COMMA all_values . RPAREN

    RPAREN  shift, and go to state 166


State 149

   58 all_values: all_value . COMMA all_values
   59           | all_value .
   60 all_value: all_value . LBRACK expr RBRACK
   61          | all_value . POINT IDENTIFIER

    COMMA   shift, and go to state 167
    POINT   shift, and go to state 67
    LBRACK  shift, and go to state 68

    $default  reduce using rule 59 (all_values)


State 150

   79 number_list: bool_expr COMMA number_list .

    $default  reduce using rule 79 (number_list)


State 151

   80 number_list: expr COMMA number_list .

    $default  reduce using rule 80 (number_list)


State 152

    7 function_declaration: type IDENTIFIER LPAREN RPAREN LBRACE . statements RBRACE

    IF          shift, and go to state 1
    WHILE       shift, and go to state 2
    FOR         shift, and go to state 3
    RETURN      shift, and go to state 4
    PRINTF      shift, and go to state 5
    SCANF       shift, and go to state 6
    T_INT       shift, and go to state 7
    T_BOOL      shift, and go to state 8
    T_CHAR      shift, and go to state 9
    T_STRING    shift, and go to state 10
    T_VOID      shift, and go to state 11
    T_STRUCT    shift, and go to state 12
    IDENTIFIER  shift, and go to state 13
    INTEGER     shift, and go to state 14
    CHAR        shift, and go to state 15
    SEMICOLON   shift, and go to state 16
    LPAREN      shift, and go to state 17
    ADD         shift, and go to state 18
    SUB         shift, and go to state 19
    NOT         shift, and go to state 20

    statements           go to state 168
    statement            go to state 159
    for_stmt             go to state 26
    assign_stmt          go to state 27
    if_else_stmt         go to state 28
    printf_stmt          go to state 29
    scanf_stmt           go to state 30
    while_stmt           go to state 31
    declare_stmt         go to state 32
    simple_instructions  go to state 33
    simple_instruction   go to state 34
    bool_expr            go to state 35
    all_value            go to state 36
    expr                 go to state 37
    type                 go to state 160


State 153

    6 function_declaration: type IDENTIFIER LPAREN parameters RPAREN . LBRACE statements RBRACE

    LBRACE  shift, and go to state 169


State 154

    9 parameters: parameter COMMA . parameters

    T_INT     shift, and go to state 7
    T_BOOL    shift, and go to state 8
    T_CHAR    shift, and go to state 9
    T_STRING  shift, and go to state 10
    T_VOID    shift, and go to state 11
    T_STRUCT  shift, and go to state 12

    parameters  go to state 170
    parameter   go to state 134
    type        go to state 135


State 155

   10 parameter: type IDENTIFIER .

    $default  reduce using rule 10 (parameter)


State 156

   46 variable: IDENTIFIER LBRACK INTEGER RBRACK .

    $default  reduce using rule 46 (variable)


State 157

   47 variable: variable LBRACK INTEGER RBRACK .

    $default  reduce using rule 47 (variable)


State 158

   23 field: LBRACE statements . RBRACE

    RBRACE  shift, and go to state 171


State 159

   11 statements: statement .
   12           | statement . statements

    IF          shift, and go to state 1
    WHILE       shift, and go to state 2
    FOR         shift, and go to state 3
    RETURN      shift, and go to state 4
    PRINTF      shift, and go to state 5
    SCANF       shift, and go to state 6
    T_INT       shift, and go to state 7
    T_BOOL      shift, and go to state 8
    T_CHAR      shift, and go to state 9
    T_STRING    shift, and go to state 10
    T_VOID      shift, and go to state 11
    T_STRUCT    shift, and go to state 12
    IDENTIFIER  shift, and go to state 13
    INTEGER     shift, and go to state 14
    CHAR        shift, and go to state 15
    SEMICOLON   shift, and go to state 16
    LPAREN      shift, and go to state 17
    ADD         shift, and go to state 18
    SUB         shift, and go to state 19
    NOT         shift, and go to state 20

    $default  reduce using rule 11 (statements)

    statements           go to state 172
    statement            go to state 159
    for_stmt             go to state 26
    assign_stmt          go to state 27
    if_else_stmt         go to state 28
    printf_stmt          go to state 29
    scanf_stmt           go to state 30
    while_stmt           go to state 31
    declare_stmt         go to state 32
    simple_instructions  go to state 33
    simple_instruction   go to state 34
    bool_expr            go to state 35
    all_value            go to state 36
    expr                 go to state 37
    type                 go to state 160


State 160

   34 declare_stmt: type . instructions

    IDENTIFIER  shift, and go to state 137

    instructions  go to state 81
    instruction   go to state 82
    variable      go to state 83


State 161

   26 if_else_stmt: IF LPAREN bool_expr RPAREN field ELSE . field

    LBRACE  shift, and go to state 140

    field  go to state 173


State 162

   24 for_stmt: FOR LPAREN simple_instruction SEMICOLON bool_expr SEMICOLON . simple_instructions RPAREN field

    IDENTIFIER  shift, and go to state 13
    INTEGER     shift, and go to state 14
    CHAR        shift, and go to state 15
    LPAREN      shift, and go to state 17
    ADD         shift, and go to state 18
    SUB         shift, and go to state 19
    NOT         shift, and go to state 20

    simple_instructions  go to state 174
    simple_instruction   go to state 34
    bool_expr            go to state 35
    all_value            go to state 36
    expr                 go to state 37


State 163

   28 printf_stmt: PRINTF LPAREN STRING COMMA exprs RPAREN .

    $default  reduce using rule 28 (printf_stmt)


State 164

   31 exprs: expr COMMA . exprs

    IDENTIFIER  shift, and go to state 13
    INTEGER     shift, and go to state 14
    CHAR        shift, and go to state 15
    LPAREN      shift, and go to state 43
    ADD         shift, and go to state 18
    SUB         shift, and go to state 19

    exprs      go to state 175
    all_value  go to state 44
    expr       go to state 145


State 165

   60 all_value: all_value . LBRACK expr RBRACK
   61          | all_value . POINT IDENTIFIER
   63          | LPAREN all_value . RPAREN

    POINT   shift, and go to state 67
    RPAREN  shift, and go to state 96
    LBRACK  shift, and go to state 68


State 166

   30 scanf_stmt: SCANF LPAREN STRING COMMA all_values RPAREN .

    $default  reduce using rule 30 (scanf_stmt)


State 167

   58 all_values: all_value COMMA . all_values

    IDENTIFIER  shift, and go to state 146
    LPAREN      shift, and go to state 147

    all_values  go to state 176
    all_value   go to state 149


State 168

    7 function_declaration: type IDENTIFIER LPAREN RPAREN LBRACE statements . RBRACE

    RBRACE  shift, and go to state 177


State 169

    6 function_declaration: type IDENTIFIER LPAREN parameters RPAREN LBRACE . statements RBRACE

    IF          shift, and go to state 1
    WHILE       shift, and go to state 2
    FOR         shift, and go to state 3
    RETURN      shift, and go to state 4
    PRINTF      shift, and go to state 5
    SCANF       shift, and go to state 6
    T_INT       shift, and go to state 7
    T_BOOL      shift, and go to state 8
    T_CHAR      shift, and go to state 9
    T_STRING    shift, and go to state 10
    T_VOID      shift, and go to state 11
    T_STRUCT    shift, and go to state 12
    IDENTIFIER  shift, and go to state 13
    INTEGER     shift, and go to state 14
    CHAR        shift, and go to state 15
    SEMICOLON   shift, and go to state 16
    LPAREN      shift, and go to state 17
    ADD         shift, and go to state 18
    SUB         shift, and go to state 19
    NOT         shift, and go to state 20

    statements           go to state 178
    statement            go to state 159
    for_stmt             go to state 26
    assign_stmt          go to state 27
    if_else_stmt         go to state 28
    printf_stmt          go to state 29
    scanf_stmt           go to state 30
    while_stmt           go to state 31
    declare_stmt         go to state 32
    simple_instructions  go to state 33
    simple_instruction   go to state 34
    bool_expr            go to state 35
    all_value            go to state 36
    expr                 go to state 37
    type                 go to state 160


State 170

    9 parameters: parameter COMMA parameters .

    $default  reduce using rule 9 (parameters)


State 171

   23 field: LBRACE statements RBRACE .

    $default  reduce using rule 23 (field)


State 172

   12 statements: statement statements .

    $default  reduce using rule 12 (statements)


State 173

   26 if_else_stmt: IF LPAREN bool_expr RPAREN field ELSE field .

    $default  reduce using rule 26 (if_else_stmt)


State 174

   24 for_stmt: FOR LPAREN simple_instruction SEMICOLON bool_expr SEMICOLON simple_instructions . RPAREN field

    RPAREN  shift, and go to state 179


State 175

   31 exprs: expr COMMA exprs .

    $default  reduce using rule 31 (exprs)


State 176

   58 all_values: all_value COMMA all_values .

    $default  reduce using rule 58 (all_values)


State 177

    7 function_declaration: type IDENTIFIER LPAREN RPAREN LBRACE statements RBRACE .

    $default  reduce using rule 7 (function_declaration)


State 178

    6 function_declaration: type IDENTIFIER LPAREN parameters RPAREN LBRACE statements . RBRACE

    RBRACE  shift, and go to state 180


State 179

   24 for_stmt: FOR LPAREN simple_instruction SEMICOLON bool_expr SEMICOLON simple_instructions RPAREN . field

    LBRACE  shift, and go to state 140

    field  go to state 181


State 180

    6 function_declaration: type IDENTIFIER LPAREN parameters RPAREN LBRACE statements RBRACE .

    $default  reduce using rule 6 (function_declaration)


State 181

   24 for_stmt: FOR LPAREN simple_instruction SEMICOLON bool_expr SEMICOLON simple_instructions RPAREN field .

    $default  reduce using rule 24 (for_stmt)
